"""Report templates for Milvus import performance analysis."""

from typing import Dict, Any


COMPREHENSIVE_REPORT_TEMPLATE = """
# Milvus Import Performance Report

## Executive Summary
{executive_summary}

## Performance Metrics

### Import Timeline
{import_timeline}

### Throughput Analysis
{throughput_analysis}

## Resource Utilization

### Compute Resources
{compute_resources}

### Storage Performance
{storage_performance}

## Performance Analysis

### Bottleneck Identification
{bottleneck_analysis}

### Anomaly Detection
{anomaly_detection}

## Optimization Recommendations

### Immediate Actions
{immediate_actions}

### Long-term Improvements
{longterm_improvements}

## Technical Details
{technical_details}
"""


GLM_ANALYSIS_PROMPT = """You are a Milvus import data organizer. Based on the provided raw data, generate a structured factual report without analysis or recommendations.

## Data to Analyze:
{data_json}

## Instructions:
Generate a structured data report with the following sections, using only the facts from the provided data:

1. **Import Summary**
   - Test date/time: Extract from start_time/end_time if available
   - Job IDs: List all job IDs found in data
   - Collection name: If specified
   - Total duration: Calculate from phase timings
   - Data volume: Total rows and file size from the data
   - Overall status: success/failed based on error messages

2. **Performance Metrics**
   - Import Timeline: Create a markdown table showing each phase with:
     - Phase name (from import_phase)
     - Duration (from time_cost, convert to seconds)
     - Percentage of total time
   - Throughput Data: Calculate rows/sec and MB/sec if data is available

3. **Resource Utilization**
   - Compute Resources: Present CPU cores and memory usage data if available
   - Storage Performance: Show IOPS and throughput metrics if present
   - Format as simple tables with available values

4. **Data Details**
   - File Information: File count, sizes, types from the data
   - Collection schema details if available
   - Configuration parameters found in logs

5. **Log Messages**
   - List any error or warning messages found
   - Note any significant events or completion messages

Format the report in clean markdown with proper headers and tables.
Only present facts from the data - do not add analysis, interpretations, or recommendations.
If data is missing for any section, simply note "Data not available" or omit empty sections."""




def format_analysis_report(glm_response: str, raw_data: Dict[str, Any]) -> str:
    """Format the final analysis report with GLM response and additional context."""
    
    # The GLM response should already be well-formatted markdown
    # We can add a header/footer if needed
    
    header = "<!-- Generated by Milvus Import Analyzer with GLM-4-Flash -->\n"
    
    footer = f"\n\n---\n*Report generated using GLM-4-Flash analysis engine*\n"
    
    if "metadata" in raw_data:
        meta = raw_data["metadata"]
        if meta.get("job_ids"):
            footer += f"*Job IDs: {', '.join(meta['job_ids'])}*\n"
    
    return header + glm_response + footer