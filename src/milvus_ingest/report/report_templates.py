"""Report templates for Milvus import performance analysis."""

from typing import Any

COMPREHENSIVE_REPORT_TEMPLATE = """
# Milvus Import Performance Report

## Executive Summary
{executive_summary}

## Performance Metrics

### Import Timeline
{import_timeline}

### Throughput Analysis
{throughput_analysis}

## Resource Utilization

### Compute Resources
{compute_resources}

### Storage Performance
{storage_performance}

## Performance Analysis

### Bottleneck Identification
{bottleneck_analysis}

### Anomaly Detection
{anomaly_detection}

## Optimization Recommendations

### Immediate Actions
{immediate_actions}

### Long-term Improvements
{longterm_improvements}

## Technical Details
{technical_details}
"""


GLM_ANALYSIS_PROMPT = """Generate a Milvus import test report with the following metrics. Extract data from the provided JSON.

## Input Data:
{data_json}

## REQUIRED METRICS (按测试场景需求):

### 1. 测试场景 (Test Scenario)
From metadata.test_scenario or import_info.test_parameters:
- Test scenario description
- Schema type
- File format and configuration

### 2. 总行数 (Total Rows)
From import_info.total_rows - show with thousand separators

### 3. 文件类型 (File Type)
From import_info.file_types array

### 4. 导入结果 (Import Result)
From import_info.status - show as SUCCESS/FAILED

### 5. 总耗时 (Total Duration)
From import_info.total_duration_seconds - format as seconds

### 6. 各阶段耗时 (Phase Duration)
Search loki_logs for "jobTimeCost" entries:
Extract: [jobTimeCost/PHASE=DURATION]
Create simple table:
| Phase | Duration |
|-------|----------|
| preimport | X.XXs |
| import | X.XXs |
| stats | X.XXs |
| buildIndex | X.XXs |
| l0Import | X.XXXµs |

### 7. DataNode Memory
From prometheus_metrics.raw_queries.milvus_memory:
- Path: response.data.result[0].values
- Extract values, convert to GB (divide by 1073741824)
- Show: Average, Min, Max in GB

### 8. DataNode CPU
From prometheus_metrics.raw_queries.milvus_cpu:
- Path: response.data.result[0].values
- Show as cores: Average, Min, Max

### 9. S3/MinIO IOPS
From prometheus_metrics.raw_queries:
- minio_read_iops: Average, Max
- minio_write_iops: Average, Max

### 10. S3/MinIO Throughput
From prometheus_metrics.raw_queries:
- minio_read_bytes: Convert to MB/s (divide by 1048576)
- minio_write_bytes: Convert to MB/s

### 11. Binlog Count
From prometheus_metrics.raw_queries.binlog_count:
- Extract final value (last in values array)

### 12. Binlog Size
From prometheus_metrics.raw_queries.binlog_size:
- Extract final value, convert to GB

### 13. 备注 (Notes)
From metadata.notes or any error messages in loki_logs

## OUTPUT FORMAT:

Create a clean summary table with all metrics:

| Metric | Value |
|--------|-------|
| Test Scenario | (extract from data) |
| Total Rows | (show with commas) |
| File Type | (from file_types) |
| Import Result | SUCCESS or FAILED |
| Total Duration | X.XX seconds |
| DataNode Memory | Avg: X.XX GB, Min: X.XX GB, Max: X.XX GB |
| DataNode CPU | Avg: X.XX cores, Min: X.XX cores, Max: X.XX cores |
| MinIO Read IOPS | Avg: X.XX, Max: X.XX |
| MinIO Write IOPS | Avg: X.XX, Max: X.XX |
| MinIO Read Throughput | Avg: X.XX MB/s, Max: X.XX MB/s |
| MinIO Write Throughput | Avg: X.XX MB/s, Max: X.XX MB/s |
| Binlog Count | (final value) |
| Binlog Size | X.XX GB |
| Notes | (any notes or N/A) |

Phase Duration Table:
| Phase | Duration |
|-------|----------|
| preimport | X.XX s |
| import | X.XX s |
| stats | X.XX s |
| buildIndex | X.XX s |
| l0Import | X.XXX µs |

Focus on data extraction only. Do not add analysis or recommendations."""


def format_analysis_report(
    glm_response: str, raw_data: dict[str, Any], model_name: str = "GLM"
) -> str:
    """Format the final analysis report with GLM response and additional context.
    
    Args:
        glm_response: The analysis result from GLM
        raw_data: The raw data dictionary
        model_name: The actual GLM model used (e.g., 'glm-4.5', 'glm-4.5-air', 'glm-4-flash')
    """

    # The GLM response should already be well-formatted markdown
    # We can add a header/footer if needed

    # Format model name for display
    display_model = model_name.upper().replace("-", " ")
    
    header = f"<!-- Generated by Milvus Import Analyzer with {display_model} -->\n"

    footer = f"\n\n---\n*Report generated using {display_model} analysis engine*\n"

    if "metadata" in raw_data:
        meta = raw_data["metadata"]
        if meta.get("job_ids"):
            footer += f"*Job IDs: {', '.join(meta['job_ids'])}*\n"

    return header + glm_response + footer
