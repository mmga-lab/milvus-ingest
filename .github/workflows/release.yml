name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  build:
    name: Build and Test Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: true

      - name: Install dependencies
        run: make install-dev

      - name: Run all checks (lint + test)
        run: make check

      - name: Build package
        run: make build

      - name: Check package
        run: pdm run python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test-install:
    name: Test Installation
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl

      - name: Test CLI
        run: |
          milvus-ingest --help

      - name: Test basic functionality
        run: |
          echo '{"collection_name": "test_collection", "fields": [{"name": "id", "type": "Int64", "is_primary": true}, {"name": "text", "type": "VarChar", "max_length": 100}]}' > test_schema.json
          milvus-ingest generate --schema test_schema.json --validate-only

  publish-pypi:
    name: Publish to PyPI
    needs: [test-install]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/milvus-ingest
    permissions:
      id-token: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  publish-github:
    name: Publish to GitHub Releases
    needs: [test-install]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Extract tag name
        id: tag
        run: echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          name: Release ${{ steps.tag.outputs.name }}
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.name, 'alpha') || contains(steps.tag.outputs.name, 'beta') || contains(steps.tag.outputs.name, 'rc') }}

  docker:
    name: Build and Push Docker Image
    needs: [test-install]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max